import React, { useEffect, useState, useContext } from 'react';
import styles from './SubscribeButton.module.css';
import { LanguageContext } from './LanguageSelector';
import { buttonTranslations } from '../utils/translations';

const loadKindeWidgetScripts = () => {
  const link = document.createElement('link');
  link.rel = 'stylesheet';
  link.href = 'https://widgets.kinde.com/v1/css/subscribe.css';
  document.head.appendChild(link);

  const script = document.createElement('script');
  script.src = 'https://widgets.kinde.com/v1/js/subscribe.js';
  script.async = true;
  return { script, link };
};

const SubscribeButton: React.FC = () => {
  const [isModalOpen, setIsModalOpen] = useState(false);
  const { selectedLanguage } = useContext(LanguageContext);

  const getTranslation = (key: string) => {
    if (!buttonTranslations[key as keyof typeof buttonTranslations]) {
      console.error(`Translation key not found: ${key}`);
      return key; // Return the key itself as a fallback
    }
    return buttonTranslations[key as keyof typeof buttonTranslations][selectedLanguage as keyof (typeof buttonTranslations)[keyof typeof buttonTranslations]] || 
           buttonTranslations[key as keyof typeof buttonTranslations]['English'] ||
           key; // Fallback to the key itself if both selected language and English are not available
  };

  useEffect(() => {
    const { script, link } = loadKindeWidgetScripts();
    document.body.appendChild(script);

    return () => {
      document.head.removeChild(link);
      document.body.removeChild(script);
    };
  }, []);

  return (
    <>
      <button onClick={() => setIsModalOpen(true)} className={styles.subscribeButton}>
        {getTranslation('subscribe')}
      </button>
      {isModalOpen && (
        <div className={styles.modalOverlay} onClick={() => setIsModalOpen(false)}>
          <div className={styles.modalContent} onClick={(e) => e.stopPropagation()}>
            <button 
              className={styles.closeButton} 
              onClick={() => setIsModalOpen(false)}
              aria-label={getTranslation('closeModal')}
            >
              &times;
            </button>
            <div className={`kuiembed-container ${styles.kindeForm}`}>
              {/* Replace this with the HTML code generated by Kinde */}
              <div data-kui-form="true" id="id__kui_form"></div>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default SubscribeButton;